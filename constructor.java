
// constructor
// default
// parameterized
// copy
// private
// constructor overloading
// constructor overriding
// ==========================================================================================

// public class Employee {

// public Employee() { // this is constructor
// System.out.println("Employee Constructor");
// }

// public Employee satyam() {
// System.out.println("Satyam Method");
// return new Employee();
// }
// }

// Here the first one is a constructor, notice that there is no return type and
// no return statement.
// The second one is a normal method where we are again calling the first
// constructor to get Employee instance and return it.
// Itâ€™s recommended to not have method name same as the class name because it
// creates confusion
// Satyam is mehtod name here

// =================================================================================

// Without constructor

// class Student {
// int modelYear;
// String modelName;
// }

// public class constructor{
// public static void main(String[] args) {

// // Creating instances of the Student class

// Student myCar1 = new Student();
// myCar1.modelYear = 1967;
// myCar1.modelName = "Mustang";

// Student myCar2 = new Student();
// myCar2.modelYear = 1968;
// myCar2.modelName = "Hero Honda";

// // Accessing and printing the values
// System.out.println(myCar1.modelYear + " " + myCar1.modelName);
// System.out.println(myCar2.modelYear + " " + myCar2.modelName);
// }
// }

// ------------------------------------------------------------------------------------------------------------------------------------
// Constructor Parameters
// Object create karte waqt is aagr value initialize karna ho tooh
// hum constructor ka use karte hai ..

// example-1

// Constructors can also take parameters, which is used to initialize attributes.
// With constructor

// class Student {
// int modelYear;
// String modelName;

// // Constructor
// public Student(int year, String name) {
// modelYear = year;
// modelName = name;
// }
// }

// public class Constructor {
// public static void main(String[] args) {
// // Creating an instance of the Student class using the constructor
// Student myCar1 = new Student(1967, "Mustang");
// Student myCar2 = new Student(1968, "Hero Honda");

// // Accessing and printing the values
// System.out.println(myCar1.modelYear + " " + myCar1.modelName);
// }
// }

// ======================================================================================================================

// In Java, constructors are not inherited from the parent class to the child class.
// However, the child class can call the constructor of the parent class using
// the super() keyword.
// 
// class Parent {
// int num;

// // Constructor of Parent class
// Parent(int num) {
// this.num = num;
// System.out.println("Parent constructor called with num: " + num);
// }
// }

// class Child extends Parent {
// // Constructor of Child class
// Child(int num) {
// super(num); // Calling the constructor of Parent class
// System.out.println("Child constructor called");
// }
// }

// public class constructor {
// public static void main(String[] args) {
// // Creating an object of Child class
// Child childObj = new Child(10);
// }
// }

// =========================================================================================================================================================

// 1. Default Constructor in Java

// A constructor is called "Default Constructor" when it doesn't have any parameter ;
// A constructor that has no parameters is known as default the constructor ;
// if we don't create a constructor ,the compiler does create a default constructor, A default constructor is invisible ;
//  if we write a constructor with no arguments is called Default Construtor  ;

// example -1.

// class Bike1{//creating a default constructor
// Bike1(){ // generated by compiler only
// }
// public static void main(String args[]){
// Bike1 b=new Bike1(); //calling a default constructor
// }
// }

// ======================================================================================================================

// Example:2 user define constructor

// class GFG {
// //  default Constructor
// GFG() {
// System.out.println("user define constructor"); }

// // Driver function
// public static void main(String[] args)
// {
// GFG hello = new GFG();
// }
// }

// ======================================================================================================================
// 2. Parameterized Constructor in Java
// A constructor that has parameters is known as parameterized constructor.
// If we want to initialize fields of the class with our own values, then use a
// parameterized constructor.

// Example: Java Program for Parameterized Constructor

// class Geek {
//     String name;
//     int id;

//     Geek(String name, int id)// this is parameterized constructor
//     {
//         this.name = name;
//         this.id = id;
//     }
// }

// class GFG {
//     public static void main(String[] args) {
//         // This would invoke the parameterized constructor.
//         Geek geek1 = new Geek("avinash", 68);
//         System.out.println("GeekName :" + geek1.name
//                 + " and GeekId :" + geek1.id);
//     }
// }

// ===============================================================================

// 3. Copy Constructor in Java
// Ek object ke sarre content ko dusre object me copy kar data hai 

// class A {

//     int a;
//     String b;

//     A() {
//         a = 10;
//         b = "Learn_coding";
//         System.out.println(a + " " + b);
//     }

//     A(A ref) {
//         a = ref.a;
//         b = ref.b;
//         System.out.println(a + " " + b);
//     }

//     public class constructor {

//         public static void main(String[] args) {
//             A obj = new A();
//             A obj2 = new A(obj);
//         }
//     }
// }

// ===============================================================================

// 4. Private Constructor in Java

// class A {

//     int a;
//     double b;
//     String c;

//     private A() {
//         a = 10;
//         b=1.1 ;
//         c = "Learn_coding";
//         System.out.println(a + " " + b+ " "+c);
//     }

// static void show(){

// }
//     public class constructor {

//         public static void main(String[] args) {
//             A obj = new A();

//         }
//     }
// }

// ===============================================================================

// ========================================================================================================================================================

// constructor overloading

// class Demo {
//     Demo() {
//         System.out.println("hello world ");
//     }

//     Demo(int i) {
//         System.out.println("hello india ");
//     }

//     Demo(double x) {
//         System.out.println("hello grurgram ");
//     }
// }

// public class constructor {
//     public static void main(String[] args) {
//         Demo obj = new Demo();
//         Demo obj1 = new Demo(2);
//         Demo obj2 = new Demo(2.9);
//     }

// }

// ====================================================================================
// New world
// =================================================================================================//
// ====================================================================================
// example -1

// // // Constructor execution in case of Inheritance
// class Base {

// Base() {
// System.out.println("Base class constructor is called ");
// }
// }

// class Derived extends Base {
// Derived() {
// System.out.println("Derived class constructor is called ");
// }

// }

// public class constructor{

// public static void main(String[] args) {
// Derived d = new Derived() ; // when we call the child class constructor to
// create object ,
// // then constructor of base class with no argument gets automatically called
// in derived class constructor
// }
// }

// ==================================================================================================
// // example -2

// // Constructor execution in case of Inheritance

// class Base {
// Base(int b) { // main yaha pe parametrized constructor bana dia islie default
// // constructor jo ban raha tha wo delete hogaya islie error show ho raha hai
// System.out.println("Base class constructor is called " + b);
// }
// }
// class Derived extends Base {
// Derived() {
// System.out.println("Derived class constructor is called ");
// }
// }

// public class constructor {

// public static void main(String[] args) {
// Derived d = new Derived() ; // when we call the child class constructor to
// create object ,
// // then constructor of base class with no argument gets automatically called
// in derived class constructor
// }
// }

// ==================================================================================================
// example -2 ka solution

// Constructor execution in case of Inheritance

// class Base {

// Base(int b) { // main yaha pe parametrized constructor bana dia islie default
// constructor jo ban raha tha wo delete hogaya ;
// System.out.println("Base class constructor is called " + b);
// }
// }

// class Derived extends Base {

// Derived() {
// super(100);
// System.out.println("Derived class constructor is called ");
// }

// }

// public class inheritance {

// public static void main(String[] args) {
// Derived d = new Derived() ; // but when we call the parametrized constructor
// of base class ,then we call it using super();
// // the point to note is base class constructor call must be the first line in
// the derived class constructor ;
// }
// }

// ==================================================================================================

// parametrized Constructor execution in case of Inheritance uppar 2 dono ka
// mixed example hai ye

// when we call the child class constructor to create object ,
// then constructor of base class with no argument gets automatically called in
// derived class constructor
// but when we call the parametrized constructor of base class ,then we call it
// using super();
// the point to note is base class constructor call must be the first line in
// the derived class constructor ;

// class Demo1 {
// int a, b;

// public Demo1() // A constructor is called "Default Constructor" when it
// doesn't have any parameter
// {
// System.out.println("Parent class Constructor");
// }

// public Demo1(int x, int y) // A constructor that has parameters is known as
// parameterized constructor.
// {
// System.out.println("parameterized Parent class Constructor");
// a=x;
// b=y;
// }
// }

// class Demo2 extends Demo1 // inheritance
// {
// int m, n;

// public Demo2() // // A constructor is called "Default Constructor" when it
// doesn't have any parameter
// {
// // super() method call , super method ka kaam hai parent claas ke constructor
// ko call karna
// // super(10,20); // super(10,20) , ye sirf parent class me parameterized
// constructor. ko call akrga

// this(10,20); // this() method call , this method ka kaam hai parent claas ke
// constructor ko call karna
// // lekin ye sirf parent class me normal constructor. ko call akrga

// System.out.println("Child class Constructor");
// }

// public Demo2(int x, int y) // // A constructor that has parameters is known
// as parameterized constructor.
// {
// //super();
// System.out.println("parameterized child class Constructor 2");
// m=x;
// n=y;
// }
// }

// public class inheritance {
// public static void main(String[] args)
// {

// Demo2 d=new Demo2();
// // ye ho gaya constructor call
// // when we call the child class constructor to create object ,
// // then constructor of base class with no argument gets automatically called
// in derived class constructor
// // but when we call the parametrized constructor of base class ,then we cal
// it using super();
// // super() method call , super method ka kaam hai parent claas ke constructor
// ko call karna
// // lekin ye sirf parent class me parameterized constructor. ko call akrga
// // this() method call , this method ka kaam hai parent claas ke constructor
// ko call karna
// // lekin ye sirf parent class me normal constructor. ko call akrga

// }

// }
